import tensorflow as tf
import pandas as pd
import numpy as np
import win32com.client
import text_to_image
#import input_data
from PIL import Image
import sys
import io
import os
import csv
from tensorflow.contrib.framework import arg_scope
from tensorflow.contrib.layers import batch_norm, flatten

sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding = 'utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.detach(), encoding = 'utf-8')


batch_size = 200
test_size = 2
learningRate = 0.1

global_step = tf.Variable(0,trainable=False, name = 'global_step')

labels_val = ["0","146","150","166","250","401","413","809","812","813","814","817","819","820","824","826","827","828","831"]

def Batch_Normalization(x, training, scope):
    with arg_scope([batch_norm],
                   scope=scope,
                   updates_collections=None,
                   decay=0.9,
                   center=True,
                   scale=True,
                   zero_debias_moving_mean=True) :
        return tf.cond(training,
                        lambda : batch_norm(inputs=x, is_training=training, reuse=None),
                        lambda : batch_norm(inputs=x, is_training=training, reuse=True))

def init_weights(shape):
    return tf.Variable(tf.random_normal(shape, stddev=0.01))

def model(X, w, w2, w3, w4, w_o, p_keep_conv, p_keep_hidden):
    a1 = tf.nn.conv2d(X, w, strides=[1, 1, 1, 1], padding='SAME')
    bn1 = Batch_Normalization(a1, training, 'cnn-batch_norm1')
    l1a = tf.nn.relu(bn1)
    l1 = tf.nn.max_pool(l1a, ksize=[1, 2, 2, 1],              # l1 shape=(?, 14, 14, 32)
                        strides=[1, 2, 2, 1], padding='SAME')
    l1 = tf.nn.dropout(l1, p_keep_conv)

    a2 = tf.nn.conv2d(l1, w2, strides=[1, 1, 1, 1], padding='SAME')
    bn2 = Batch_Normalization(a2, training, 'cnn-batch_norm2')
    l2a = tf.nn.relu(bn2)
    l2 = tf.nn.max_pool(l2a, ksize=[1, 2, 2, 1],              # l2 shape=(?, 7, 7, 64)
                        strides=[1, 2, 2, 1], padding='SAME')
    l2 = tf.nn.dropout(l2, p_keep_conv)

    a3 = tf.nn.conv2d(l2, w3, strides=[1, 1, 1, 1], padding='SAME')
    bn3 = Batch_Normalization(a3, training, 'cnn-batch_norm3')
    l3a = tf.nn.relu(bn3)
    l3 = tf.nn.max_pool(l3a, ksize=[1, 2, 2, 1],              # l3 shape=(?, 4, 4, 128)
                        strides=[1, 2, 2, 1], padding='SAME')

    l3 = tf.reshape(l3, [-1, w4.get_shape().as_list()[0]])    # reshape to (?, 2048)
    l3 = tf.nn.dropout(l3, p_keep_conv)

    a4 = tf.matmul(l3, w4)
    bn4 = Batch_Normalization(a4, training, 'fc-batch_norm1')
    l4 = tf.nn.relu(bn4)
    l4 = tf.nn.dropout(l4, p_keep_hidden)

    pyx = tf.matmul(l4, w_o)
    bn5 = Batch_Normalization(pyx, training, 'fc-batch_norm2')
    return bn5

#excel = win32com.client.Dispatch("Excel.Application")
#excel_file = excel.Workbooks.Open('C:\\Users\\aiia\\.atom\\python\\text_to_image\\main_data_set.xlsx')
#w_sheet = excel_file.Activesheet


def dataset(PATH):
    data = pd.read_csv(PATH, header=None)
    images = data.iloc[:, :].values
    images = images.astype(np.float)
    images = images.reshape(images.shape[0], 28, 28, 1)
    images = np.multiply(images, 1.0 / 255.0)
    return images

def dence_to_one_hot(labels_dence, num_classes):
    num_labes = labels_dence.shape[0]
    #print(num_labes)
    index_offset = np.arange(num_labes) * num_classes
    #print(index_offset)
    labels_one_hot = np.zeros((num_labes, num_classes))
    #print(labels_dence.ravel())
    labels_one_hot.flat[index_offset + labels_dence.ravel()] = 1#flat - 배열을 1차원으로 두고 인덱스를 이용해 값 확인
    return labels_one_hot


def label_make(PATH):
    list=[]
    for root, dirs, files in os.walk(PATH):
        for name in files:
            data = os.path.splitext(name)[0]
            i = data.split('_')[1]
            test_data = pd.read_excel('C:\\Users\\aiia\\.atom\\python\\text_to_image\\main_data_set.xlsx', header = None)
            b = int(i)-1
            a = test_data[3][b]
            #a = w_sheet.Cells(i,4).Value
            #r = a.split()
            list.append(int(a))
    return np.asarray(list)

#teX = dataset('C:\\Users\\aiia\\.atom\\python\\text_to_image\\test_img_pixels.csv')
teX = dataset('C:\\Users\\aiia\\.atom\\python\\text_to_image\\test_img_pixels.csv')
#trX = dataset('C:\\Users\\aiia\\.atom\\python\\text_to_image\\train_img_pixels.csv')
#teY_pre = label_make('C:\\Users\\aiia\\.atom\\python\\text_to_image\\test')
teY_pre = label_make('C:\\Users\\aiia\\.atom\\python\\text_to_image\\test')
teY = dence_to_one_hot(teY_pre, 19)
#trY_pre = label_make('C:\\Users\\aiia\\.atom\\python\\text_to_image\\train')
#trY = dence_to_one_hot(trY_pre, 19)



#excel_file.Save()
#excel.Quit()



#trX = trX.reshape(-1, 28, 28, 1)  # 28x28x1 input img
teX = teX.reshape(-1, 28, 28, 1)  # 28x28x1 input img

X = tf.placeholder("float", [None, 28, 28, 1])
Y = tf.placeholder("float", [None, 19])
training = tf.placeholder(tf.bool)

w = init_weights([3, 3, 1, 32])       # 3x3x1 conv, 32 outputs
w2 = init_weights([3, 3, 32, 64])     # 3x3x32 conv, 64 outputs
w3 = init_weights([3, 3, 64, 128])    # 3x3x32 conv, 128 outputs
w4 = init_weights([128 * 4 * 4, 625]) # FC 128 * 4 * 4 inputs, 625 outputs
w_o = init_weights([625, 19])         # FC 625 inputs, 10 outputs (labels)

p_keep_conv = tf.placeholder("float")
p_keep_hidden = tf.placeholder("float")
py_x = model(X, w, w2, w3, w4, w_o, p_keep_conv, p_keep_hidden)
predict_op = tf.argmax(py_x, 1)
#cost = tf.reduce_sum(tf.square(y_arg - predict_op)) / (2 * batch_size)
#cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels = Y, logits = py_x))
#train_op = tf.train.RMSPropOptimizer(0.001, 0.9).minimize(cost)
#train_op = tf.train.AdamOptimizer(learningRate).minimize(cost)


# Launch the graph in a session
with tf.Session() as sess:
    # you need to initialize all variables
    #tf.initialize_all_variables().run()
    sess.run(tf.global_variables_initializer())
    saver = tf.train.Saver()
    saver.restore(sess, os.getcwd() + "/Training_save.ckpt-3300")



    is_correct = tf.equal(tf.argmax(Y,1),tf.argmax(py_x,1))
    accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))
    print('정확도 : ', sess.run(accuracy, feed_dict={X: teX,
                                    Y: teY,
                                    p_keep_conv: 1.0,
                                    p_keep_hidden: 1.0,
                                    training: False}))



#    print('정확도 : ', sum/100)
